{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/components.module.ts","webpack:///./src/app/components/side-bar/side-bar.component.html","webpack:///./src/app/components/side-bar/side-bar.component.ts","webpack:///./src/app/init/constants.service.ts","webpack:///./src/app/pages/auth/login/login.component.html","webpack:///./src/app/pages/auth/login/login.component.ts","webpack:///./src/app/services/auth/auth.service.ts","webpack:///./src/app/services/credentials/credential.service.ts","webpack:///./src/app/services/httpInterceptor/httpFactory.ts","webpack:///./src/app/services/httpInterceptor/intercepted.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["var map = {\n\t\"./pages/auth/auth.module.ngfactory\": [\n\t\t\"./src/app/pages/auth/auth.module.ngfactory.js\",\n\t\t\"pages-auth-auth-module-ngfactory\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";\nmodule.exports = webpackAsyncContext;","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './pages/auth/login/login.component';\n\nconst routes: Routes = [\n  {\n    path: 'plan',\n    loadChildren: './pages/auth/auth.module#AuthModule'\n  },\n  {\n    path: 'login',\n    component: LoginComponent\n  },\n  {\n    path: '**',\n    redirectTo: 'plan'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","<app-side-bar></app-side-bar>\n<router-outlet></router-outlet>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'apm';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { Http, XHRBackend, RequestOptions, HttpModule } from '@angular/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\nimport { ComponentsModule } from './components/components.module';\nimport { HttpFactory } from './services/httpInterceptor/httpFactory';\nimport { AuthService } from './services/auth/auth.service';\nimport { CredentialService } from './services/credentials/credential.service';\nimport { LoginComponent } from './pages/auth/login/login.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ComponentsModule,\n    HttpModule,\n    FormsModule,\n    ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production })\n  ],\n  providers: [\n    CredentialService,\n    AuthService,\n    {\n      provide: Http,\n      useFactory: HttpFactory,\n      deps: [XHRBackend, RequestOptions]\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SideBarComponent } from './side-bar/side-bar.component';\nimport { OffersComponent } from './offers/offers.component';\n\n@NgModule({\n  declarations: [\n    SideBarComponent,\n    OffersComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    SideBarComponent,\n    OffersComponent\n  ]\n})\nexport class ComponentsModule { }\n","<div class=\"container\">\n  <div class=\"logo\">\n    <img src=\"assets/img/logo.png\" alt=\"\">\n  </div>\n  <div class=\"options\">\n    <img src=\"assets/img/settings.png\" alt=\"\">\n    <p>Settings</p>\n  </div>\n  <div class=\"options\">\n    <img src=\"assets/img/chat.png\" alt=\"\">\n    <p>Chat</p>\n  </div>\n  <div class=\"options\">\n    <img src=\"assets/img/rating.png\" alt=\"\">\n    <p>Rating</p>\n  </div>\n  <div class=\"options\">\n    <img src=\"assets/img/info.png\" alt=\"\">\n    <p>Info</p>\n  </div>\n  <div class=\"options\">\n    <img src=\"assets/img/social.png\" alt=\"\">\n    <p>Social</p>\n  </div>\n  <div class=\"options\">\n    <img src=\"assets/img/refer.png\" alt=\"\">\n    <p>Refer</p>\n  </div>\n  <div class=\"options\" (click)=\"login()\">\n    <img src=\"assets/img/refer.png\" alt=\"\">\n    <p>Login</p>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-side-bar',\n  templateUrl: './side-bar.component.html',\n  styleUrls: ['./side-bar.component.scss']\n})\nexport class SideBarComponent implements OnInit {\n\n  constructor(public router: Router) { }\n\n  ngOnInit() {\n  }\n\n  login() {\n    this.router.navigate([\"/login\"])\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConstantsService {\n  public API_ENDPOINT = 'https://mongodb-multi-instance-test.herokuapp.com'\n  public Image_base_path = ''\n\n  constructor() { }\n}\n","<div class=\"container\">\n  <div class=\"wrapper\">\n    <div class=\"form-slide\">\n      <div class=\"form-head-row\">\n        <span class=\"back\">\n          <img src=\"assets/img/back.png\" alt=\"icon\" />\n          <span>\n            Back\n          </span>\n        </span>\n      </div>\n      <div class=\"form-area\">\n        <h3>Login</h3>\n        <form>\n          <div class=\"form-row\">\n            <div class=\"form-three-col\">\n              <label>Email</label>\n              <input type=\"text\" [(ngModel)]=\"user.email\" name=\"address\" [ngClass]=\"{'active': user.email != ''}\" />\n            </div>\n            <div class=\"form-three-col\">\n              <label>Password</label>\n              <input type=\"password\" [(ngModel)]=\"user.password\" name=\"unit\"\n                [ngClass]=\"{'active': user.password != ''}\" />\n            </div>\n          </div>\n          <span class=\"blue-btn\" (click)=\"login()\">Login</span>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  public user = {\n    email: '',\n    password: ''\n  }\n  constructor(public auth: AuthService) { }\n\n  ngOnInit() {\n  }\n\n  login() {\n    if (this.user.email == '' || this.user.password == '') {\n      alert(\"Please don't leave any field blank\");\n      return;\n    }\n    var params = {\n      email: this.user.email,\n      pwd: this.user.password\n    }\n    this.auth.login(params).subscribe((success) => {\n      alert(\"Login Successful\");\n    }, (error) => {\n      alert(\"wrong email or password.\")\n    })\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { ConstantsService } from 'src/app/init/constants.service';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(public http: Http, public constants: ConstantsService) { }\n\n  signUp(params) {\n    var url = this.constants.API_ENDPOINT + '/api/dentist/auth/v2/register';\n    var response = this.http.post(url, params, {}).pipe(map(res => res.json()));\n    return response;\n  }\n\n  pay(params) {\n    var url = this.constants.API_ENDPOINT + '/api/dentist/auth/v2/pay-init';\n    var response = this.http.post(url, params, {}).pipe(map(res => res.json()));\n    return response;\n  }\n\n  login(params) {\n    var url = this.constants.API_ENDPOINT + '/api/dentist/auth/login';\n    var response = this.http.post(url, params, {}).pipe(map(res => res.json()));\n    return response;\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CredentialService {\n  public user;\n  constructor() { }\n}\n","import { XHRBackend, Http, RequestOptions } from \"@angular/http\";\nimport { InterceptedHttp } from \"./intercepted\";\n\n\nexport function HttpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http {\n    return new InterceptedHttp(xhrBackend, requestOptions);\n}","import { Injectable } from \"@angular/core\";\nimport { ConnectionBackend, RequestOptions, Request, RequestOptionsArgs, Response, Http, Headers } from \"@angular/http\";\n\n\n\n@Injectable()\nexport class InterceptedHttp extends Http {\n    constructor(backend: ConnectionBackend, defaultOptions: RequestOptions) {\n        super(backend, defaultOptions);\n    }\n\n    request(url: string | Request, options?: RequestOptionsArgs) {\n        return super.request(url, options)\n        // .catch(err => {\n        //     try {\n        //         var error = JSON.parse(err._body);\n        //         if (err.name == \"TimeoutError\") {\n        //             return Observable.throw({ status: 420 })\n        //         } else if (error.errorMessage == 'Session Expired') {\n\n        //             return Observable.throw({ status: 'session', message: 'session expired' });\n        //         } else\n        //             return Observable.throw(err);\n        //     } catch (exception) {\n        //         return Observable.throw(err);\n        //     }\n        // });\n    }\n\n    get(url: string, options?: RequestOptionsArgs) {\n        return super.get(url, this.getRequestOptionArgs(options));\n    }\n\n    post(url: string, body: string, options?: RequestOptionsArgs) {\n        return super.post(url, body, this.getRequestOptionArgs(options));\n    }\n\n    put(url: string, body: string, options?: RequestOptionsArgs) {\n        return super.put(url, body, this.getRequestOptionArgs(options));\n    }\n\n    delete(url: string, options?: RequestOptionsArgs) {\n        return super.delete(url, this.getRequestOptionArgs(options));\n    }\n\n    private getRequestOptionArgs(options?: RequestOptionsArgs): RequestOptionsArgs {\n        if (options == null) {\n            options = new RequestOptions();\n        }\n        if (options.headers == null) {\n            options.headers = new Headers();\n        }\n        options.headers.append('app_key', 'MdeDKSXifoYhQZYpEvh+Eol2PvuPWBuL7rVjaHRO7j0=');\n        var _token = localStorage.getItem('token');\n        if (_token)\n            options.headers.set('session_token', _token);\n\n        options.headers.set(\"Cache-Control\", \"no-cache\");\n\n        return options;\n    }\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}